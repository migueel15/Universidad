model febrero2022

class Banco
end

class Ciudad
end

abstract class Cuenta
	attributes
		saldo: Real init: 0.0
	operations
		pedirSaldo():Real
		ingresarDinero(cantidad:Real)
		sacarDinero(cantidad:Real)
		transferirDinero(cantidad:Real, destino:Cuenta)
end

class CuentaCredito < Cuenta
	attributes
		limite: Real init: 10.0
end

class CuentaCorriente < Cuenta
end

abstract class Cliente
end

class Persona < Cliente
end

class Empresa < Cliente
end

class Sucursal < Empresa
	operations
	abrirCuentaDeCredito(p:Cliente): CuentaCredito
		begin
			declare c:CuentaCredito;
			c:=new CuentaCredito();
			insert(c,p) into CuentasCliente;
			insert(self,c) into CuentasEnPropiedad;
			result:=c;
		end

	abrirCuentaCorriente(p:Cliente): CuentaCorriente
		begin
			declare c:CuentaCorriente;
			c:= new CuentaCorriente();
			insert(c,p) into CuentasCliente;
			insert(self,c) into CuentasEnPropiedad;
			result:=c;
		end

	cambioLimite(c:CuentaCredito, nuevoLimite: Real): Boolean
		begin
			declare aprobado: Boolean;
			result:=false;
			aprobado:=
				if self.principal->isEmpty() then
					self.autorizarCambioLimite(c, nuevoLimite)
				else
					self.principal.autorizarCambioLimite(c,nuevoLimite)
				endif;
			if aprobado then
				c.limite:= nuevoLimite;
				result:=true;
			end
		end
		pre CuentaPerteniciente: c.sucursal = self

	autorizarCambioLimite(c:CuentaCredito, nuevoLimite: Real): Boolean = 
			(nuevoLimite<c.limite) or ((c.limite*1.1 <= nuevoLimite) and (c.saldo >= nuevoLimite))
end


association SucursalesCiudad between
	Sucursal[0..3] role sucursales
	Ciudad[1] role cuidad
end

association CuentasCliente between
	Cuenta[1..*] role cuenta
	Cliente[1] role cliente
end

association CuentaDeSucursal between
	Sucursal[0..1] role deLaSucursal
	Cuenta[1] role cuentaSucursal
end

association CuentasEnPropiedad between
	Sucursal[1] role sucursal
	Cuenta[1..*] role cuentas
end

composition SucursalDeBanco between
	Banco[1] role banco
	Sucursal[1..*] role sucursales
end

association Subordinadas between
	Sucursal[0..1] role principal
	Sucursal[*] role subordinada
end

association Vip between
	Banco[*] role bancoVIP
	Empresa[*] role empresaVIP derive =
		Empresa.allInstances()->select(e | e.cuenta->exists(c|c.saldo>=1000000 and c.sucursal.banco = self))
end

constraints

