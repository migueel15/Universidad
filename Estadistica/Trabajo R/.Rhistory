library(tidyverse)
library(readr)
library(purrr)
# AÃ±ado mi directorio como ruta del trabajo
setwd("~/Universidad/Estadistica/Trabajo R")
data <- read_csv("21425.csv", col_types=cols(.default=col_double(), sexo=col_factor(),
dietaEsp=col_factor(), nivEstPad=col_factor(),
nivEstudios=col_factor(), nivIngresos=col_factor()))
data$IMC <- data$peso/data$altura^2
data <- na.omit(data)
dfNumerico <- keep(data,is.numeric)
medias <- map_dbl(dfNumerico, mean)
medias
desvTipicas <- dfNumerico %>%
summarise_all(function(x) sqrt(mean(x^2) - mean(x)^2)) %>%
map_dbl(function(x) x)
varPredictorias <- names(data[3:14])
varPredictorias
coefRegresion <- function(df,y,x){
modelo <- lm(y ~ x, df)
summary(modelo)$coefficients[2]
}
calcR2 <- function(df,y,x){
modelo <- lm(y ~ x, df)
summary(modelo)$r.squared
}
coeficientes <- map_dbl(varPredictorias, ~ coefRegresion(data,data$IMC, data[[.]]))
coeficientes
valoresR2 <- map_dbl(varPredictorias, ~ calcR2(data,data$IMC, data[[.]]))
valoresR2
linearAdjust <- function(df, y, x) {
list(x=x, y=y, mod=lm(str_c(y, "~", x), df))
}
dibujarModelos <- function(mod) {
jpeg(str_c("./Imagenes/", mod$x, ".jpeg"))
if (is.numeric(data[[mod$x]])) {
plot(data[[mod$x]], data[[mod$y]], xlab=mod$x, ylab=mod$y)
abline(mod$mod, col="red")
}else{
boxplot(formula=data[[mod$y]] ~ data[[mod$x]], xlab=mod$x, ylab=mod$y)
}
dev.off()
}
mods <- names(data) %>% map(~linearAdjust(data, "IMC", .))
# Utilizando el metodo walk para generar los graficos. Creo la carpeta imagenes
# en caso de no estarlo.
dir.create("Imagenes")
mods %>% walk(dibujarModelos)
separarSets <- function(df, p1, p2) {
rDf <- 1:nrow(df)
rTrain <- sample(rDf, p1 * length(rDf))
rResto  <- setdiff(rDf, rTrain)
rTest <- sample(rResto, p2*length(rDf))
rValid <- setdiff(rResto, rTest)
list(train=df[rTrain,], test=df[rTest,], valid=df[rValid,])
}
setsSeparados <- separarSets(data,.6,.2)
calcR2ajst <- function(df, mod, y) {
MSE <- mean((df[[y]] - predict.lm(mod, df)) ^ 2)
varY <- mean(df[[y]] ^ 2) - mean(df[[y]]) ^ 2
R2 <- 1 - MSE / varY
ajR2 <- 1 - (1- R2) * (nrow(df) - 1) / (nrow(df) - mod$rank)
ajR2
}
calcModR2 <- function(dfTrain, dfTest, y, x) {
mod <- linearAdjust(dfTrain, y, x)
calcR2ajst(dfTest, mod$mod, y)
}
AjstR2 <- varPredictorias %>%
map_dbl(calcModR2,dfTrain=setsSeparados$train,dfTest=setsSeparados$test,y="IMC")
x <- which.max(AjstR2)
mejorVar <- varPredictorias[x]
mejorVar
AjstR2[x]
encontrarMejorAjuste <- function(dfTrain, dfTest, varPos) {
bestVars <- character(0)
aR2      <- 0
repeat {
aR2v <- map_dbl(varPos, ~calcModR2(dfTrain, dfTest, "IMC", c(bestVars, .)))
i    <- which.max(aR2v)
aR2M <- aR2v[i]
if (aR2M <= aR2) break
cat(sprintf("%1.4f %s\n", aR2M, varPos[i]))
aR2 <- aR2M
bestVars <- c(bestVars, varPos[i])
varPos   <- varPos[-i]
}
mod <- linearAdjust(dfTrain, "IMC", bestVars)
list(vars=bestVars, mod=mod)
}
mejorAjuste <- encontrarMejorAjuste(setsSeparados$train, setsSeparados$test, varPredictorias)
mejorMod <- mejorAjuste$mod$mod
calcR2ajst(setsSeparados$valid, mejorMod, "IMC")
dfEval <- read_csv("eval.csv")
dfEval["IMC"] <- predict.lm(mejorMod, dfEval)
dfEval["Peso"] <- dfEval$IMC*dfEval$altura^2
write.csv(dfEval, "evalX.csv", row.names = FALSE)
